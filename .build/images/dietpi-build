#!/bin/bash
# Created by MichaIng / micha@dietpi.com / dietpi.com
{
##########################################
# Load DietPi-Globals
##########################################
if [[ -f '/boot/dietpi/func/dietpi-globals' ]]
then
	. /boot/dietpi/func/dietpi-globals
else
	[[ $G_GITOWNER && $G_GITBRANCH ]] || { echo '[FAILED] You must export or pass G_GITOWNER and G_GITBRANCH to the script'; exit 1; }
	curl -sSf "https://raw.githubusercontent.com/$G_GITOWNER/DietPi/$G_GITBRANCH/dietpi/func/dietpi-globals" -o /tmp/dietpi-globals || exit 1
	. /tmp/dietpi-globals
	G_EXEC_NOHALT=1 G_EXEC rm /tmp/dietpi-globals
	export G_GITOWNER G_GITBRANCH G_HW_ARCH_NAME=$(uname -m)
fi
case $G_HW_ARCH_NAME in
	'armv6l') export G_HW_ARCH=1; DEB_ARCH='armhf';;
	'armv7l') export G_HW_ARCH=2; DEB_ARCH='armhf';;
	'aarch64') export G_HW_ARCH=3; DEB_ARCH='arm64';;
	'x86_64') export G_HW_ARCH=10; DEB_ARCH='amd64';;
	*) G_DIETPI-NOTIFY 1 "Unsupported host system architecture \"$G_HW_ARCH_NAME\" detected, aborting..."; exit 1;;
esac
readonly G_PROGRAM_NAME='DietPi-Build'
G_CHECK_ROOT_USER
G_CHECK_ROOTFS_RW
readonly FP_ORIGIN=$PWD # Store origin dir
G_INIT
G_EXEC cd "$FP_ORIGIN" # Process everything in origin dir instead of /tmp/$G_PROGRAM_NAME

##########################################
# Process inputs
##########################################
HW_MODEL=
HW_ARCH=
DISTRO=6 # 6=Bullseye, 7=Bookworm
PTTYPE='msdos'
FSTYPE='ext4'
ITYPE=
VMTYPE=
GITBRANCH='master'
GITOWNER='MichaIng'
while (( $# ))
do
	case $1 in
		'-m') shift; HW_MODEL=$1;;
		'-a') shift; HW_ARCH=$1;;
		'-d') shift; DISTRO=$1;;
		'-p') shift; PTTYPE=$1;;
		'-f') shift; FSTYPE=$1;;
		'-i') ITYPE='Installer';;
		'-v') shift; VMTYPE=$1;;
		'-b') shift; GITBRANCH=$1;;
		'-o') shift; GITOWNER=$1;;
		'-e') shift; EDITION=$1;;
		*) G_DIETPI-NOTIFY 1 "Invalid input \"$1\", aborting..."; exit 1;;
	esac
	shift
done

# Check for valid target hardware model and set variables accordingly
WIFI_REQUIRED=1
partition_start=1
efi_size=64
boot_size=0
root_size=1023
CLONING_TOOL='dd'
case $HW_MODEL in
	0) iname='RPi' partition_start=4 boot_size=128 root_size=892;;
	15) iname='OdroidN2' HW_ARCH=3 partition_start=4 root_size=764;;
	16) iname='OdroidC4' HW_ARCH=3 partition_start=4 root_size=764;;
	20) iname='VM' WIFI_REQUIRED=0 VMTYPE=${VMTYPE:-raw};;
	21) iname='NativePC-BIOS' HW_ARCH=10 root_size=1215;;
	*) G_DIETPI-NOTIFY 1 "Invalid hardware model \"$HW_MODEL\" passed, aborting..."; exit 1;;
esac

if [[ $VMTYPE ]]
then
	[[ $HW_MODEL == 20 ]] || { G_DIETPI-NOTIFY 1 "Invalid option \"-v\" (virtual machine type) for hardware model \"$HW_MODEL\", aborting..."; exit 1; }
	[[ $VMTYPE =~ ^(raw|vbox|vmware|esxi|hyperv|utm|parallels|all)$ ]] || { G_DIETPI-NOTIFY 1 "Invalid virtual machine type \"$VMTYPE\" passed, aborting..."; exit 1; }
fi

if [[ $EDITION ]]
then
	[[ $HW_MODEL == 0 ]] || { G_DIETPI-NOTIFY 1 "Invalid option \"-e\" (edition) for hardware model \"$HW_MODEL\", aborting..."; exit 1; }
	[[ $EDITION =~ ^(Amiberry|all)$ ]] || { G_DIETPI-NOTIFY 1 "Invalid edition \"$EDITION\" passed, aborting..."; exit 1; }
fi

# Check for valid target architecture and set variables accordingly
repo='https://deb.debian.org/debian/'
keyring='/usr/share/keyrings/debian-archive-keyring.gpg'
case $HW_ARCH in
	1) iarch='ARMv6' parch='armhf' repo='http://raspbian.raspberrypi.org/raspbian/' keyring='/usr/share/keyrings/raspbian-archive-keyring.gpg';;
	2) iarch='ARMv7' parch='armhf';;
	3) iarch='ARMv8' parch='arm64';;
	10) iarch='x86_64' parch='amd64';;
	*) G_DIETPI-NOTIFY 1 "Invalid architecture \"$HW_ARCH\" passed, aborting..."; exit 1;;
esac

exclude=
case $DISTRO in
	6) distro='bullseye';;
	7) distro='bookworm' exclude=',gcc-10-base';;
	*) G_DIETPI-NOTIFY 1 "Invalid distro \"$DISTRO\" passed, aborting..."; exit 1;;
esac

case $PTTYPE in
	'msdos') efi_size=0;;
	'gpt') boot_size=0; [[ $HW_MODEL == 21 ]] && iname='NativePC-UEFI' ITYPE='Installer';;
	*) G_DIETPI-NOTIFY 1 "Invalid partition table type \"$PTTYPE\" passed, aborting..."; exit 1;;
esac

apackages=()
case $FSTYPE in
	'ext4') apackages+=('e2fsprogs');;
	'f2fs') apackages+=('f2fs-tools');;
	'btrfs') apackages+=('btrfs-progs');;
	*) G_DIETPI-NOTIFY 1 "Invalid filesystem type \"$FSTYPE\" passed, aborting..."; exit 1;;
esac

G_CHECK_URL "https://github.com/$GITOWNER/DietPi/tree/$GITBRANCH" || { G_DIETPI-NOTIFY 1 "Failed to access Git branch \"$GITBRANCH\", aborting..."; exit 1; }

# Image name
OUTPUT_IMG_NAME="DietPi_$iname-$iarch-${distro^}"
[[ $ITYPE ]] && OUTPUT_IMG_NAME+="_$ITYPE"

# x86_64 installer images are packaged with Clonezilla
[[ $HW_ARCH == 10 && $ITYPE == 'Installer' ]] && CLONING_TOOL='Clonezilla'

##########################################
# Dependencies
##########################################
# EFI and boot partitions are FAT
(( $efi_size || $boot_size )) && apackages+=('dosfstools')

# Emulation support in case of incompatible architecture
if (( ( $G_HW_ARCH < 10 && $G_HW_ARCH < $HW_ARCH ) || ( $G_HW_ARCH == 10 && $G_HW_ARCH != $HW_ARCH ) ))
then
	apackages+=('qemu-user-static' 'binfmt-support')
	# On Ubuntu Focal, install newer QEMU package: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=964289
	# Use package from Debian repo, since Ubuntu does not shot ARM packages and has no global HTTPS mirror director
	if (( ${G_DISTRO:=5} < 6 ))
	then
		G_EXEC curl -fL "https://deb.debian.org/debian/pool/main/q/qemu/qemu-user-static_6.2+dfsg-2_$DEB_ARCH.deb" -o qemu.deb
		G_EXEC dpkg -i qemu.deb
		G_EXEC rm qemu.deb
	fi
fi

# Virtual machine disk conversion
[[ $VMTYPE && $VMTYPE != 'raw' ]] && apackages+=('qemu-utils')

G_AG_CHECK_INSTALL_PREREQ parted debootstrap dbus systemd-container "${apackages[@]}"

# Parallels VM: A new qemu-utils build is required which supports PVM virtual disks
if [[ $VMTYPE == 'parallels' && ${G_DISTRO:=5} -lt 7 ]]
then
	if (( $G_DISTRO == 6 ))
	then
		G_AGI -t bullseye-backports qemu-utils
	else
		G_EXEC curl -fL "https://deb.debian.org/debian/pool/main/q/qemu/qemu-utils_6.2+dfsg-2~bpo11+1_$DEB_ARCH.deb" -o qemu-utils.deb
		G_EXEC dpkg -i --force-depends qemu-utils.deb
		G_EXEC rm qemu-utils.deb
	fi
fi

# Bootstrap archive keyring if missing
if [[ ! -f $keyring ]]
then
	[[ $keyring == *'debian'* ]] && url='https://deb.debian.org/debian/pool/main/d/debian-archive-keyring/debian-archive-keyring_2021.1.1_all.deb' || url='https://archive.raspbian.org/raspbian/pool/main/r/raspbian-archive-keyring/raspbian-archive-keyring_20120528.2_all.deb'
	G_EXEC curl -sSf "$url" -o /tmp/keyring.deb
	G_EXEC_OUTPUT=1 G_EXEC dpkg -i /tmp/keyring.deb
	G_EXEC_NOHALT=1 G_EXEC rm /tmp/keyring.deb
fi

##########################################
# Partitions and filesystems
##########################################
# Exit trap for cleanup
G_EXIT_CUSTOM(){
	findmnt -M "$FP_ORIGIN/rootfs" &> /dev/null && G_EXEC umount -R "$FP_ORIGIN/rootfs"
	[[ -d $FP_ORIGIN/rootfs ]] && G_EXEC rmdir "$FP_ORIGIN/rootfs"
	[[ $FP_LOOP ]] && losetup "$FP_LOOP" &> /dev/null && G_EXEC losetup -d "$FP_LOOP"
	[[ -f $OUTPUT_IMG_NAME.img ]] && G_EXEC rm "$OUTPUT_IMG_NAME.img"
	(( $mask_dbus )) && G_EXEC systemctl mask --now dbus dbus.socket
}

# Create image file
G_EXEC fallocate -l "$((partition_start+efi_size+boot_size+root_size))M" "$OUTPUT_IMG_NAME.img"

# GPT: Set partition labels instead of types
if [[ $PTTYPE == 'gpt' ]]
then
	# GPT partition table and EFI partition
	G_EXEC parted -s "$OUTPUT_IMG_NAME.img" unit MiB mklabel gpt mkpart 'EFI' fat32 $partition_start $((partition_start+efi_size)) set 1 esp on
	# root partition
	G_EXEC parted -s "$OUTPUT_IMG_NAME.img" unit MiB mkpart 'root' "$FSTYPE" $((partition_start+efi_size)) 100%

# MBR: Set partition types instead of labels
else
	# MBR partition table
	G_EXEC parted -s "$OUTPUT_IMG_NAME.img" unit MiB mklabel msdos
	# boot partition
	(( $boot_size )) && G_EXEC parted -s "$OUTPUT_IMG_NAME.img" unit MiB mkpart primary fat32 $((partition_start)) $((partition_start+boot_size))
	# root partition
	G_EXEC parted -s "$OUTPUT_IMG_NAME.img" unit MiB mkpart primary "$FSTYPE" $((partition_start+boot_size)) 100%
	# x86_64: Set boot flag
	G_EXEC parted -s "$OUTPUT_IMG_NAME.img" set 1 boot on
fi

# Create loop device
FP_LOOP=$(losetup -f)
G_EXEC losetup "$FP_LOOP" "$OUTPUT_IMG_NAME.img"
G_EXEC partprobe "$FP_LOOP"
G_EXEC partx -u "$FP_LOOP"

# Create and mount filesystems and fstab
G_EXEC mkdir rootfs
# + EFI partition
if [[ $PTTYPE == 'gpt' ]]
then
	FP_ROOT_DEV=2
	G_EXEC mkfs.fat -F 32 "${FP_LOOP}p1"
	G_EXEC "mkfs.$FSTYPE" "${FP_LOOP}p2"
	G_EXEC mount "${FP_LOOP}p2" rootfs
	G_EXEC mkdir -p rootfs/boot/efi
	G_EXEC mount "${FP_LOOP}p1" rootfs/boot/efi
	G_EXEC mkdir rootfs/etc
	cat << _EOF_ > rootfs/etc/fstab
PARTUUID=$(lsblk -no PARTUUID "${FP_LOOP}p2") / $FSTYPE noatime,lazytime 0 1
PARTUUID=$(lsblk -no PARTUUID "${FP_LOOP}p1") /boot/efi vfat noatime,lazytime 0 2
_EOF_
# + boot partition
elif (( $boot_size ))
then
	FP_ROOT_DEV=2
	G_EXEC mkfs.fat -F 32 "${FP_LOOP}p1"
	G_EXEC "mkfs.$FSTYPE" "${FP_LOOP}p2"
	G_EXEC mount "${FP_LOOP}p2" rootfs
	G_EXEC mkdir rootfs/boot
	G_EXEC mount "${FP_LOOP}p1" rootfs/boot
	G_EXEC mkdir rootfs/etc
	cat << _EOF_ > rootfs/etc/fstab
PARTUUID=$(lsblk -no PARTUUID "${FP_LOOP}p2") / $FSTYPE noatime,lazytime 0 1
PARTUUID=$(lsblk -no PARTUUID "${FP_LOOP}p1") /boot vfat noatime,lazytime 0 2
_EOF_
# - single partition
else
	FP_ROOT_DEV=1
	G_EXEC "mkfs.$FSTYPE" "${FP_LOOP}p1"
	G_EXEC mount "${FP_LOOP}p1" rootfs
	G_EXEC mkdir rootfs/etc
	cat << _EOF_ > rootfs/etc/fstab
PARTUUID=$(lsblk -no PARTUUID "${FP_LOOP}p1") / $FSTYPE noatime,lazytime 0 1
_EOF_
fi

##########################################
# debootstrap
##########################################
G_EXEC_OUTPUT=1 G_EXEC debootstrap --variant=minbase --exclude="gcc-7-base,gcc-8-base,gcc-9-base$exclude" --include='bash-completion,bzip2,ca-certificates,console-setup,cron,curl,dropbear,ethtool,fake-hwclock,fdisk,gnupg,htop,ifupdown,isc-dhcp-client,kmod,locales,nano,p7zip,parted,procps,psmisc,rfkill,sudo,systemd-sysv,systemd-timesyncd,tzdata,udev,unzip,usbutils,wget,whiptail' --arch="$parch" --keyring="$keyring" "$distro" ./rootfs "$repo"

# Remove cached archives and list files created by debootstrap
G_EXEC rm -R rootfs/var/{cache/apt,lib/apt/lists}/*

##########################################
# DietPi-PREP
##########################################
# Create rc.local to automate DietPi-PREP
cat << _EOF_ > rootfs/etc/rc.local
#!/bin/dash
{
infocmp "$TERM" > /dev/null 2>&1 || TERM='dumb'
echo '[ INFO ] Running DietPi-PREP...'
export GITOWNER='$GITOWNER' GITBRANCH='$GITBRANCH' HW_MODEL='$HW_MODEL' IMAGE_CREATOR=0 PREIMAGE_INFO='from scratch' WIFI_REQUIRED=$WIFI_REQUIRED DISTRO_TARGET=$DISTRO
bash -c "\$(curl -sSf 'https://raw.githubusercontent.com/$G_GITOWNER/DietPi/$G_GITBRANCH/PREP_SYSTEM_FOR_DIETPI.sh')" || poweroff
_EOF_

# - VM: Generate tiny-initramfs with explicit kernel modules, as auto-detection doesn't work correctly within container and loop devices
[[ $HW_MODEL == 20 ]] && cat << _EOF_ >> rootfs/etc/rc.local
echo '[ INFO ] Rebuilding virtual machine initramfs to support all virtualizers...'
version=\$(dpkg --get-selections | mawk '\$1~/^linux-image-.*-$parch\$/{print \$1;exit}') || poweroff
version=\${version#linux-image-}
mktirfs -m no -M no --include-modules='ahci,sd_mod,vmw_pvscsi,hv_storvsc,$FSTYPE' -o "/boot/initrd.img-\$version" "\$version" || poweroff
_EOF_

cat << '_EOF_' >> rootfs/etc/rc.local
> /success
poweroff
exit 0
} > /dev/console 2>&1 < /dev/console
_EOF_
G_EXEC chmod +x rootfs/etc/rc.local

# Start container
# - dbus required for container spawn
mask_dbus=0
if [[ $(readlink /etc/systemd/system/dbus.socket) == '/dev/null' ]]
then
	mask_dbus=1
	G_EXEC systemctl unmask dbus.socket dbus
	G_EXEC systemctl start dbus.socket
fi
# - Bind mounts required to allow container reading its own drive info, /dev/disk for GRUB and probably other tools to detect UUIDs
abind=()
[[ -b ${FP_LOOP}p2 ]] && abind=("--bind=${FP_LOOP}p2")
systemd-nspawn -bD rootfs --bind="$FP_LOOP"{,p1} "${abind[@]}" --bind=/dev/disk || exit 1
[[ -f 'rootfs/success' ]] || { G_DIETPI-NOTIFY 1 'The container setup did not finish successfully, aborting...'; exit 1; }
G_EXEC rm rootfs/success
G_EXEC sync
G_EXEC sleep 1
G_EXEC umount -R rootfs
G_EXEC rmdir rootfs
G_EXEC losetup -d "$FP_LOOP"
(( $mask_dbus )) && { G_EXEC systemctl mask --now dbus dbus.socket && mask_dbus=0; }

##########################################
# DietPi-Imager
##########################################
# Do not pack and upload raw VM image if not explicitly requested
[[ $VMTYPE && ! $VMTYPE =~ ^(raw|all)$ ]] && SHRINK_ONLY='On' || SHRINK_ONLY='Off'
export FP_ROOT_DEV CLONING_TOOL OUTPUT_IMG_NAME MOUNT_IT='Off' SHRINK_ONLY
[[ $EDITION && $EDITION != 'all' ]] || bash -c "$(curl -sSf "https://raw.githubusercontent.com/$G_GITOWNER/DietPi/$G_GITBRANCH/.meta/dietpi-imager")" 'DietPi-Imager' "$OUTPUT_IMG_NAME.img" || exit 1

#  Amiberry edition: Install automatically on first boot, enable autostart option and onboard audio on RPi
if [[ $EDITION =~ ^(Amiberry|all)$ ]]
then
	G_EXEC mv "$OUTPUT_IMG_NAME.img" "${OUTPUT_IMG_NAME}_Amiberry.img"
	OUTPUT_IMG_NAME="${OUTPUT_IMG_NAME}_Amiberry"

	# Create loop device
	FP_LOOP=$(losetup -f)
	G_EXEC losetup "$FP_LOOP" "$OUTPUT_IMG_NAME.img"
	G_EXEC partprobe "$FP_LOOP"
	G_EXEC partx -u "$FP_LOOP"

	# Mount filesystems
	G_EXEC mkdir rootfs
	if (( $boot_size ))
	then
		G_EXEC mount "${FP_LOOP}p2" rootfs
		G_EXEC mount "${FP_LOOP}p1" rootfs/boot
	else
		G_EXEC mount "${FP_LOOP}p1" rootfs
	fi

	# Install Amiberry via automated first run setup
	G_EXEC sed -i '/^AUTO_SETUP_AUTOMATED=/c\AUTO_SETUP_AUTOMATED=1' rootfs/boot/dietpi.txt
	G_EXEC sed -i '/^#AUTO_SETUP_INSTALL_SOFTWARE_ID=/c\AUTO_SETUP_INSTALL_SOFTWARE_ID=108' rootfs/boot/dietpi.txt
	# Enable Amiberry fast boot autostart option
	G_EXEC sed -i '/^AUTO_SETUP_AUTOSTART_TARGET_INDEX=/c\AUTO_SETUP_AUTOSTART_TARGET_INDEX=6' rootfs/boot/dietpi.txt
	# RPi: Enable onboard audio so that it can be detected and configured on first boot
	[[ -f 'rootfs/boot/config.txt' ]] && G_EXEC sed -i '/^dtparam=audio=/c\dtparam=audio=on' rootfs/boot/config.txt

	G_EXEC sync
	G_EXEC sleep 1
	G_EXEC umount -R rootfs
	G_EXEC rmdir rootfs
	G_EXEC losetup -d "$FP_LOOP"

	bash -c "$(curl -sSf "https://raw.githubusercontent.com/$G_GITOWNER/DietPi/$G_GITBRANCH/.meta/dietpi-imager")" 'DietPi-Imager' "$OUTPUT_IMG_NAME.img" || exit 1
fi

[[ $VMTYPE ]] || exit 0

##########################################
# Virtual machines
##########################################
G_EXEC_DESC='Downloading current README.md to pack with image...' G_EXEC curl -sSf "https://raw.githubusercontent.com/$G_GITOWNER/DietPi/$G_GITBRANCH/README.md" -o README.md

# NB: LZMA2 ultra compression requires much memory per thread. 1 GiB is not sufficient for >2 threads, hence use "-mmt2" to limit used CPU threads to "2" on 1 GiB devices with more than two cores.
limit_threads=
(( $(free -m | mawk '/Mem:/{print $2}') < 1750 && $(nproc) > 2 )) && limit_threads='-mmt2'

# Since qemu-img does not support VMDK and VHDX resizing, we need to resize the raw .img. It is usually done as sparse file, hence the actual disk usage does not change.
G_EXEC qemu-img resize "$OUTPUT_IMG_NAME.img" 8G

####### VMware ###########################
if [[ $VMTYPE =~ ^(vmware|all)$ ]]
then
	image_name=${OUTPUT_IMG_NAME/_VM-/_VMware-}
	# Convert raw image to VMDK
	G_EXEC qemu-img convert -O vmdk "$OUTPUT_IMG_NAME.img" "$image_name.vmdk"
	# Create VM configuration
	cat << _EOF_ > "$image_name.vmx"
.encoding = "windows-1252"
config.version = "8"
virtualHW.version = "10"
pciBridge0.present = "TRUE"
pciBridge4.present = "TRUE"
pciBridge4.virtualDev = "pcieRootPort"
pciBridge4.functions = "8"
pciBridge5.present = "TRUE"
pciBridge5.virtualDev = "pcieRootPort"
pciBridge5.functions = "8"
pciBridge6.present = "TRUE"
pciBridge6.virtualDev = "pcieRootPort"
pciBridge6.functions = "8"
pciBridge7.present = "TRUE"
pciBridge7.virtualDev = "pcieRootPort"
pciBridge7.functions = "8"
vmci0.present = "TRUE"
hpet0.present = "TRUE"
nvram = "$image_name.nvram"
virtualHW.productCompatibility = "hosted"
gui.exitOnCLIHLT = "FALSE"
powerType.powerOff = "soft"
powerType.powerOn = "soft"
powerType.suspend = "soft"
powerType.reset = "soft"
displayName = "$image_name"
guestOS = "debian10-64"
vhv.enable = "TRUE"
tools.syncTime = "FALSE"
vcpu.hotadd = "TRUE"
memsize = "1024"
scsi0.virtualDev = "pvscsi"
scsi0.present = "TRUE"
scsi0:0.fileName = "$image_name.vmdk"
scsi0:0.present = "TRUE"
ide1:0.autodetect = "TRUE"
ide1:0.deviceType = "cdrom-raw"
ide1:0.fileName = "auto detect"
ide1:0.present = "TRUE"
usb.present = "TRUE"
ehci.present = "TRUE"
usb_xhci.present = "TRUE"
ethernet0.addressType = "generated"
ethernet0.virtualDev = "e1000"
ethernet0.present = "TRUE"
extendedConfigFile = "$image_name.vmxf"
floppy0.present = "FALSE"
_EOF_
	G_DIETPI-NOTIFY 2 'Generating hashes to pack with VMware appliance, please wait...'
	cat << _EOF_ > hash.txt
FILE:   $image_name.vmdk
DATE:   $(date)
MD5:    $(md5sum "$image_name.vmdk" | mawk '{print $1}')
SHA1:   $(sha1sum "$image_name.vmdk" | mawk '{print $1}')
SHA256: $(sha256sum "$image_name.vmdk" | mawk '{print $1}')

FILE:   $image_name.vmx
DATE:   $(date)
MD5:    $(md5sum "$image_name.vmx" | mawk '{print $1}')
SHA1:   $(sha1sum "$image_name.vmx" | mawk '{print $1}')
SHA256: $(sha256sum "$image_name.vmx" | mawk '{print $1}')
_EOF_
	G_EXEC_DESC='Creating VMware 7-Zip archive' G_EXEC_OUTPUT=1 G_EXEC 7zr a -bsp1 -bso1 -bse2 -m0=lzma2 -mx=9 $limit_threads "$image_name.7z" "$image_name.vmdk" "$image_name.vmx" hash.txt README.md
	G_EXEC rm "$image_name.vmdk" "$image_name.vmx"
	[[ -x 'upload.sh' ]] && G_EXEC_OUTPUT=1 G_EXEC ./upload.sh "$image_name.7z" && G_EXEC rm "$image_name.7z"
fi

####### ESXi #############################
if [[ $VMTYPE =~ ^(esxi|all)$ ]]
then
	image_name=${OUTPUT_IMG_NAME/_VM-/_ESXi-}
	# Convert raw image to VMDK
	G_EXEC qemu-img convert -O vmdk -o 'subformat=streamOptimized' "$OUTPUT_IMG_NAME.img" "$image_name.vmdk"
	# Create VM configuration
	cat << _EOF_ > "$image_name.ovf"
<?xml version='1.0' encoding='UTF-8'?>
<Envelope xmlns="http://schemas.dmtf.org/ovf/envelope/1" xmlns:ovf="http://schemas.dmtf.org/ovf/envelope/1" xmlns:vmw="http://www.vmware.com/schema/ovf" xmlns:rasd="http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData" xmlns:vssd="http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_VirtualSystemSettingData">
  <References>
    <File ovf:id="file1" ovf:href="$image_name.vmdk"/>
  </References>
  <DiskSection>
    <Info>List of the virtual disks</Info>
    <Disk ovf:capacityAllocationUnits="byte * 2^30" ovf:format="http://www.vmware.com/interfaces/specifications/vmdk.html#streamOptimized" ovf:diskId="vmdisk1" ovf:capacity="8" ovf:fileRef="file1"/>
  </DiskSection>
  <NetworkSection>
    <Info>The list of logical networks</Info>
    <Network ovf:name="VM Network">
      <Description>The VM Network network</Description>
    </Network>
  </NetworkSection>
  <VirtualSystem ovf:id="$image_name">
    <Info>A Virtual system</Info>
    <Name>$image_name</Name>
    <OperatingSystemSection ovf:id="96" ovf:version="10" vmw:osType="debian10_64Guest">
      <Info>The operating system installed</Info>
      <Description>Debian GNU/Linux 10 (64-bit)</Description>
    </OperatingSystemSection>
    <VirtualHardwareSection>
      <Info>Virtual hardware requirements</Info>
      <System>
        <vssd:ElementName>Virtual Hardware Family</vssd:ElementName>
        <vssd:InstanceID>0</vssd:InstanceID>
        <vssd:VirtualSystemType>vmx-13</vssd:VirtualSystemType>
      </System>
      <Item>
        <rasd:AllocationUnits>hertz * 10^6</rasd:AllocationUnits>
        <rasd:Description>Number of Virtual CPUs</rasd:Description>
        <rasd:ElementName>1 virtual CPU(s)</rasd:ElementName>
        <rasd:InstanceID>1</rasd:InstanceID>
        <rasd:ResourceType>3</rasd:ResourceType>
        <rasd:VirtualQuantity>1</rasd:VirtualQuantity>
        <vmw:CoresPerSocket ovf:required="false">1</vmw:CoresPerSocket>
      </Item>
      <Item>
        <rasd:AllocationUnits>byte * 2^20</rasd:AllocationUnits>
        <rasd:Description>Memory Size</rasd:Description>
        <rasd:ElementName>1024MB of memory</rasd:ElementName>
        <rasd:InstanceID>2</rasd:InstanceID>
        <rasd:ResourceType>4</rasd:ResourceType>
        <rasd:VirtualQuantity>1024</rasd:VirtualQuantity>
      </Item>
      <Item>
        <rasd:Address>0</rasd:Address>
        <rasd:Description>SCSI Controller</rasd:Description>
        <rasd:ElementName>SCSI Controller 1</rasd:ElementName>
        <rasd:InstanceID>3</rasd:InstanceID>
        <rasd:ResourceSubType>VirtualSCSI</rasd:ResourceSubType>
        <rasd:ResourceType>6</rasd:ResourceType>
      </Item>
      <Item>
        <rasd:Address>0</rasd:Address>
        <rasd:Description>IDE Controller</rasd:Description>
        <rasd:ElementName>IDE Controller 1</rasd:ElementName>
        <rasd:InstanceID>4</rasd:InstanceID>
        <rasd:ResourceType>5</rasd:ResourceType>
      </Item>
      <Item>
        <rasd:AddressOnParent>0</rasd:AddressOnParent>
        <rasd:ElementName>Hard Disk 1</rasd:ElementName>
        <rasd:HostResource>ovf:/disk/vmdisk1</rasd:HostResource>
        <rasd:InstanceID>5</rasd:InstanceID>
        <rasd:Parent>3</rasd:Parent>
        <rasd:ResourceType>17</rasd:ResourceType>
      </Item>
      <Item>
        <rasd:AddressOnParent>0</rasd:AddressOnParent>
        <rasd:AutomaticAllocation>false</rasd:AutomaticAllocation>
        <rasd:ElementName>CD/DVD Drive 1</rasd:ElementName>
        <rasd:InstanceID>6</rasd:InstanceID>
        <rasd:Parent>4</rasd:Parent>
        <rasd:ResourceSubType>vmware.cdrom.remotepassthrough</rasd:ResourceSubType>
        <rasd:ResourceType>15</rasd:ResourceType>
      </Item>
      <Item>
        <rasd:AddressOnParent>0</rasd:AddressOnParent>
        <rasd:AutomaticAllocation>true</rasd:AutomaticAllocation>
        <rasd:Connection>VM Network</rasd:Connection>
        <rasd:ElementName>Network adapter 1</rasd:ElementName>
        <rasd:InstanceID>7</rasd:InstanceID>
        <rasd:ResourceSubType>VmxNet3</rasd:ResourceSubType>
        <rasd:ResourceType>10</rasd:ResourceType>
        <vmw:Config ovf:required="false" vmw:key="connectable.allowGuestControl" vmw:value="true"/>
        <vmw:Config ovf:required="false" vmw:key="wakeOnLanEnabled" vmw:value="true"/>
        <vmw:Config ovf:required="false" vmw:key="uptCompatibilityEnabled" vmw:value="true"/>
      </Item>
      <Item ovf:required="false">
        <rasd:ElementName>Video card</rasd:ElementName>
        <rasd:InstanceID>8</rasd:InstanceID>
        <rasd:ResourceType>24</rasd:ResourceType>
        <vmw:Config ovf:required="false" vmw:key="enable3DSupport" vmw:value="false"/>
        <vmw:Config ovf:required="false" vmw:key="numDisplays" vmw:value="1"/>
        <vmw:Config ovf:required="false" vmw:key="graphicsMemorySizeInKB" vmw:value="262144"/>
        <vmw:Config ovf:required="false" vmw:key="videoRamSizeInKB" vmw:value="8192"/>
        <vmw:Config ovf:required="false" vmw:key="useAutoDetect" vmw:value="false"/>
        <vmw:Config ovf:required="false" vmw:key="use3dRenderer" vmw:value="automatic"/>
      </Item>
      <vmw:Config ovf:required="false" vmw:key="cpuHotAddEnabled" vmw:value="false"/>
      <vmw:Config ovf:required="false" vmw:key="sgxInfo.epcSize" vmw:value="0"/>
      <vmw:Config ovf:required="false" vmw:key="nestedHVEnabled" vmw:value="false"/>
      <vmw:Config ovf:required="false" vmw:key="virtualSMCPresent" vmw:value="false"/>
      <vmw:Config ovf:required="false" vmw:key="flags.vvtdEnabled" vmw:value="false"/>
      <vmw:Config ovf:required="false" vmw:key="cpuHotRemoveEnabled" vmw:value="false"/>
      <vmw:Config ovf:required="false" vmw:key="sgxInfo.flcMode" vmw:value="unlocked"/>
      <vmw:Config ovf:required="false" vmw:key="sevEnabled" vmw:value="false"/>
      <vmw:Config ovf:required="false" vmw:key="virtualICH7MPresent" vmw:value="false"/>
      <vmw:Config ovf:required="false" vmw:key="flags.vbsEnabled" vmw:value="false"/>
      <vmw:Config ovf:required="false" vmw:key="memoryHotAddEnabled" vmw:value="false"/>
      <vmw:Config ovf:required="false" vmw:key="bootOptions.efiSecureBootEnabled" vmw:value="false"/>
      <vmw:Config ovf:required="false" vmw:key="firmware" vmw:value="bios"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="nvram" vmw:value="$image_name.nvram"/>
    </VirtualHardwareSection>
  </VirtualSystem>
</Envelope>
_EOF_
	# Create manifest file for automatic integrity check
	cat << _EOF_ > "$image_name.mf"
SHA1($image_name.ovf)= $(sha1sum "$image_name.ovf" | mawk '{print $1}')
SHA1($image_name.vmdk)= $(sha1sum "$image_name.vmdk" | mawk '{print $1}')
_EOF_
	# Pack everything as compressed OVA appliance for ESXi import
	G_EXEC tar -cf "$image_name.ova" "$image_name."{ovf,vmdk,mf}
	[[ $VMTYPE == 'all' ]] || G_EXEC rm "$image_name.vmdk"
	G_EXEC rm "$image_name."{ovf,mf}

	G_DIETPI-NOTIFY 2 'Generating hashes to pack with ESXi appliance, please wait...'
	cat << _EOF_ > hash.txt
FILE:   $image_name.ova
DATE:   $(date)
MD5:    $(md5sum "$image_name.ova" | mawk '{print $1}')
SHA1:   $(sha1sum "$image_name.ova" | mawk '{print $1}')
SHA256: $(sha256sum "$image_name.ova" | mawk '{print $1}')
_EOF_
	G_EXEC_DESC='Creating VirtualBox 7-Zip archive' G_EXEC_OUTPUT=1 G_EXEC 7zr a -bsp1 -bso1 -bse2 -m0=lzma2 -mx=9 $limit_threads "$image_name.7z" "$image_name.ova" hash.txt README.md
	G_EXEC rm "$image_name.ova"
	[[ -x 'upload.sh' ]] && G_EXEC_OUTPUT=1 G_EXEC ./upload.sh "$image_name.7z" && G_EXEC rm "$image_name.7z"
fi

####### VirtualBox #######################
if [[ $VMTYPE =~ ^(vbox|all)$ ]]
then
	[[ $VMTYPE == 'all' ]] && G_EXEC mv "$image_name.vmdk" "${image_name/_ESXi-/_VirtualBox-}.vmdk"
	image_name=${OUTPUT_IMG_NAME/_VM-/_VirtualBox-}
	# Convert raw image to VMDK
	[[ $VMTYPE == 'all' ]] || G_EXEC qemu-img convert -O vmdk -o 'subformat=streamOptimized' "$OUTPUT_IMG_NAME.img" "$image_name.vmdk"
	# Generate random UUIDs for VM and virtual disk
	vmuuid=$(</proc/sys/kernel/random/uuid)
	diskuuid=$(</proc/sys/kernel/random/uuid)
	# Create VM configuration
	cat << _EOF_ > "$image_name.ovf"
<?xml version="1.0"?>
<Envelope ovf:version="1.0" xml:lang="en-US" xmlns="http://schemas.dmtf.org/ovf/envelope/1" xmlns:ovf="http://schemas.dmtf.org/ovf/envelope/1" xmlns:rasd="http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData" xmlns:vssd="http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_VirtualSystemSettingData" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:vbox="http://www.virtualbox.org/ovf/machine">
  <References>
    <File ovf:id="file1" ovf:href="$image_name.vmdk"/>
  </References>
  <DiskSection>
    <Info>List of the virtual disks used in the package</Info>
    <Disk ovf:capacity="8589934592" ovf:diskId="vmdisk1" ovf:fileRef="file1" ovf:format="http://www.vmware.com/interfaces/specifications/vmdk.html#streamOptimized" vbox:uuid="$diskuuid"/>
  </DiskSection>
  <NetworkSection>
    <Info>Logical networks used in the package</Info>
    <Network ovf:name="Bridged">
      <Description>Logical network used by this appliance.</Description>
    </Network>
  </NetworkSection>
  <VirtualSystem ovf:id="DietPi_VirtualBox-x86_64-${distro^}">
    <Info>A virtual machine</Info>
    <OperatingSystemSection ovf:id="96">
      <Info>The kind of installed guest operating system</Info>
      <Description>Debian_64</Description>
      <vbox:OSType ovf:required="false">Debian_64</vbox:OSType>
    </OperatingSystemSection>
    <VirtualHardwareSection>
      <Info>Virtual hardware requirements for a virtual machine</Info>
      <System>
        <vssd:ElementName>Virtual Hardware Family</vssd:ElementName>
        <vssd:InstanceID>0</vssd:InstanceID>
        <vssd:VirtualSystemIdentifier>$image_name</vssd:VirtualSystemIdentifier>
        <vssd:VirtualSystemType>virtualbox-2.2</vssd:VirtualSystemType>
      </System>
      <Item>
        <rasd:Caption>1 virtual CPU</rasd:Caption>
        <rasd:Description>Number of virtual CPUs</rasd:Description>
        <rasd:ElementName>1 virtual CPU</rasd:ElementName>
        <rasd:InstanceID>1</rasd:InstanceID>
        <rasd:ResourceType>3</rasd:ResourceType>
        <rasd:VirtualQuantity>1</rasd:VirtualQuantity>
      </Item>
      <Item>
        <rasd:AllocationUnits>MegaBytes</rasd:AllocationUnits>
        <rasd:Caption>1024 MB of memory</rasd:Caption>
        <rasd:Description>Memory Size</rasd:Description>
        <rasd:ElementName>1024 MB of memory</rasd:ElementName>
        <rasd:InstanceID>2</rasd:InstanceID>
        <rasd:ResourceType>4</rasd:ResourceType>
        <rasd:VirtualQuantity>1024</rasd:VirtualQuantity>
      </Item>
      <Item>
        <rasd:Address>0</rasd:Address>
        <rasd:Caption>sataController0</rasd:Caption>
        <rasd:Description>SATA Controller</rasd:Description>
        <rasd:ElementName>sataController0</rasd:ElementName>
        <rasd:InstanceID>3</rasd:InstanceID>
        <rasd:ResourceSubType>AHCI</rasd:ResourceSubType>
        <rasd:ResourceType>20</rasd:ResourceType>
      </Item>
      <Item>
        <rasd:AddressOnParent>0</rasd:AddressOnParent>
        <rasd:Caption>disk1</rasd:Caption>
        <rasd:Description>Disk Image</rasd:Description>
        <rasd:ElementName>disk1</rasd:ElementName>
        <rasd:HostResource>/disk/vmdisk1</rasd:HostResource>
        <rasd:InstanceID>4</rasd:InstanceID>
        <rasd:Parent>3</rasd:Parent>
        <rasd:ResourceType>17</rasd:ResourceType>
      </Item>
      <Item>
        <rasd:AutomaticAllocation>true</rasd:AutomaticAllocation>
        <rasd:Caption>Ethernet adapter on 'Bridged'</rasd:Caption>
        <rasd:Connection>Bridged</rasd:Connection>
        <rasd:ElementName>Ethernet adapter on 'Bridged'</rasd:ElementName>
        <rasd:InstanceID>5</rasd:InstanceID>
        <rasd:ResourceType>10</rasd:ResourceType>
      </Item>
    </VirtualHardwareSection>
    <vbox:Machine ovf:required="false" version="1.16-windows" uuid="{$vmuuid}" name="$image_name" OSType="Debian_64" snapshotFolder="Snapshots" lastStateChange="$(date -u '+%Y-%M-%dT%TZ')">
      <ovf:Info>Complete VirtualBox machine configuration in VirtualBox format</ovf:Info>
      <Hardware>
        <CPU>
          <PAE enabled="false"/>
          <LongMode enabled="true"/>
          <X2APIC enabled="true"/>
          <HardwareVirtExLargePages enabled="true"/>
        </CPU>
        <Memory RAMSize="1024"/>
        <Chipset type="ICH9"/>
        <Boot>
          <Order position="1" device="HardDisk"/>
          <Order position="2" device="DVD"/>
        </Boot>
        <Display controller="VMSVGA" VRAMSize="16"/>
        <VideoCapture screens="1" file="." fps="25"/>
        <BIOS>
          <IOAPIC enabled="true"/>
          <SmbiosUuidLittleEndian enabled="true"/>
        </BIOS>
        <USB>
          <Controllers>
            <Controller name="OHCI" type="OHCI"/>
          </Controllers>
        </USB>
        <Network>
          <Adapter slot="0" enabled="true" type="virtio">
            <DisabledModes>
              <InternalNetwork name="intnet"/>
              <NATNetwork name="NatNetwork"/>
            </DisabledModes>
            <BridgedInterface name="eth0"/>
          </Adapter>
        </Network>
        <AudioAdapter codec="AD1980" driver="DirectSound" enabledIn="false"/>
        <RTC localOrUTC="UTC"/>
        <Clipboard/>
      </Hardware>
      <StorageControllers>
        <StorageController name="SATA" type="AHCI" PortCount="2" useHostIOCache="false" Bootable="true" IDE0MasterEmulationPort="0" IDE0SlaveEmulationPort="1" IDE1MasterEmulationPort="2" IDE1SlaveEmulationPort="3">
          <AttachedDevice type="HardDisk" hotpluggable="false" port="0" device="0">
            <Image uuid="{$diskuuid}"/>
          </AttachedDevice>
          <AttachedDevice passthrough="false" type="DVD" hotpluggable="false" port="1" device="0"/>
        </StorageController>
      </StorageControllers>
    </vbox:Machine>
  </VirtualSystem>
</Envelope>
_EOF_
	# Create manifest file for automatic integrity check
	cat << _EOF_ > "$image_name.mf"
SHA1 ($image_name.ovf) = $(sha1sum "$image_name.ovf" | mawk '{print $1}')
SHA1 ($image_name.vmdk) = $(sha1sum "$image_name.vmdk" | mawk '{print $1}')
_EOF_
	# Pack everything as compressed OVA appliance for VirtualBox import
	G_EXEC tar -cf "$image_name.ova" "$image_name."{ovf,vmdk,mf}
	G_EXEC rm "$image_name."{ovf,vmdk,mf}

	G_DIETPI-NOTIFY 2 'Generating hashes to pack with VMware appliance, please wait...'
	cat << _EOF_ > hash.txt
FILE:   $image_name.ova
DATE:   $(date)
MD5:    $(md5sum "$image_name.ova" | mawk '{print $1}')
SHA1:   $(sha1sum "$image_name.ova" | mawk '{print $1}')
SHA256: $(sha256sum "$image_name.ova" | mawk '{print $1}')
_EOF_
	G_EXEC_DESC='Creating VirtualBox 7-Zip archive' G_EXEC_OUTPUT=1 G_EXEC 7zr a -bsp1 -bso1 -bse2 -m0=lzma2 -mx=9 $limit_threads "$image_name.7z" "$image_name.ova" hash.txt README.md
	G_EXEC rm "$image_name.ova"
	[[ -x 'upload.sh' ]] && G_EXEC_OUTPUT=1 G_EXEC ./upload.sh "$image_name.7z" && G_EXEC rm "$image_name.7z"
fi

####### Hyper-V ##########################
if [[ $VMTYPE =~ ^(hyperv|all)$ ]]
then
	image_name=${OUTPUT_IMG_NAME/_VM-/_Hyper-V-}
	# Convert raw image to VHDX
	G_EXEC qemu-img convert -O vhdx "$OUTPUT_IMG_NAME.img" "$image_name.vhdx"

	G_DIETPI-NOTIFY 2 'Generating hashes to pack with Hyper-V image, please wait...'
	cat << _EOF_ > hash.txt
FILE:   $image_name.vhdx
DATE:   $(date)
MD5:    $(md5sum "$image_name.vhdx" | mawk '{print $1}')
SHA1:   $(sha1sum "$image_name.vhdx" | mawk '{print $1}')
SHA256: $(sha256sum "$image_name.vhdx" | mawk '{print $1}')
_EOF_
	G_EXEC_DESC='Creating Hyper-V 7-Zip archive' G_EXEC_OUTPUT=1 G_EXEC 7zr a -bsp1 -bso1 -bse2 -m0=lzma2 -mx=9 $limit_threads "$image_name.7z" "$image_name.vhdx" hash.txt README.md
	G_EXEC rm "$image_name.vhdx"
	[[ -x 'upload.sh' ]] && G_EXEC_OUTPUT=1 G_EXEC ./upload.sh "$image_name.7z" && G_EXEC rm "$image_name.7z"
fi

####### Parallels ##########################
if [[ $VMTYPE =~ ^(parallels|all)$ ]]
then
	image_name=${OUTPUT_IMG_NAME/_VM-/_Parallels-}
	# Convert raw image to HDS
	G_EXEC qemu-img convert -O parallels "$OUTPUT_IMG_NAME.img" "$image_name.hds"

	G_DIETPI-NOTIFY 2 'Generating hashes to pack with Parallels image, please wait...'
	cat << _EOF_ > hash.txt
FILE:   $image_name.hds
DATE:   $(date)
MD5:    $(md5sum "$image_name.hds" | mawk '{print $1}')
SHA1:   $(sha1sum "$image_name.hds" | mawk '{print $1}')
SHA256: $(sha256sum "$image_name.hds" | mawk '{print $1}')
_EOF_
	G_EXEC_DESC='Creating Parallels 7-Zip archive' G_EXEC_OUTPUT=1 G_EXEC 7zr a -bsp1 -bso1 -bse2 -m0=lzma2 -mx=9 $limit_threads "$image_name.7z" "$image_name.hds" hash.txt README.md
	G_EXEC rm "$image_name.hds"
	[[ -x 'upload.sh' ]] && G_EXEC_OUTPUT=1 G_EXEC ./upload.sh "$image_name.7z" && G_EXEC rm "$image_name.7z"
fi

####### UTM ##############################
if [[ $VMTYPE =~ ^(utm|all)$ ]]
then
	image_name=${OUTPUT_IMG_NAME/_VM-/_UTM-}
	# Create directory which is interpreted as VM appliance file on macOS
	G_EXEC mkdir -p "$image_name.utm/Images"
	# Convert raw image to QCOW2
	G_EXEC qemu-img convert -c -O qcow2 "$OUTPUT_IMG_NAME.img" "$image_name.utm/Images/data.qcow2"
	# Generate random MAC address and UUID for VM
	mac=$(tr -dc '0-9A-F' < /dev/urandom | head -c10 | sed -E 's/(..)/\1:/g;s/:$//;s/^/02:/') # ToDo: Beginning with "D2:"?
	vmuuid=$(</proc/sys/kernel/random/uuid)
	# Create VM configuration
	cat << _EOF_ > "$image_name.utm/config.plist"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ConfigurationVersion</key>
	<integer>2</integer>
	<key>Debug</key>
	<dict/>
	<key>Display</key>
	<dict>
		<key>ConsoleFont</key>
		<string>Menlo</string>
		<key>ConsoleFontSize</key>
		<integer>12</integer>
		<key>ConsoleOnly</key>
		<false/>
		<key>ConsoleTheme</key>
		<string>Default</string>
		<key>DisplayCard</key>
		<string>virtio-vga</string>
		<key>DisplayDownscaler</key>
		<string>linear</string>
		<key>DisplayUpscaler</key>
		<string>nearest</string>
	</dict>
	<key>Drives</key>
	<array>
		<dict>
			<key>DriveName</key>
			<string>cdrom0</string>
			<key>ImageType</key>
			<string>cd</string>
			<key>InterfaceType</key>
			<string>ide</string>
			<key>Removable</key>
			<true/>
		</dict>
		<dict>
			<key>DriveName</key>
			<string>drive0</string>
			<key>ImagePath</key>
			<string>data.qcow2</string>
			<key>ImageType</key>
			<string>disk</string>
			<key>InterfaceType</key>
			<string>ide</string>
		</dict>
	</array>
	<key>Info</key>
	<dict>
		<key>Icon</key>
		<string>linux</string>
		<key>IconCustom</key>
		<false/>
	</dict>
	<key>Input</key>
	<dict/>
	<key>Networking</key>
	<dict>
		<key>NetworkCard</key>
		<string>e1000</string>
		<key>NetworkCardMAC</key>
		<string>$mac</string>
		<key>NetworkMode</key>
		<string>bridged</string>
	</dict>
	<key>Printing</key>
	<dict/>
	<key>Sharing</key>
	<dict>
		<key>ClipboardSharing</key>
		<true/>
		<key>DirectoryReadOnly</key>
		<false/>
		<key>DirectorySharing</key>
		<true/>
		<key>Usb3Support</key>
		<true/>
		<key>UsbRedirectMax</key>
		<integer>3</integer>
	</dict>
	<key>Sound</key>
	<dict>
		<key>SoundCard</key>
		<string>intel-hda</string>
		<key>SoundEnabled</key>
		<false/>
	</dict>
	<key>System</key>
	<dict>
		<key>Architecture</key>
		<string>$iarch</string>
		<key>BootDevice</key>
		<string></string>
		<key>BootUefi</key>
		<false/>
		<key>CPU</key>
		<string>default</string>
		<key>CPUCount</key>
		<integer>1</integer>
		<key>MachineProperties</key>
		<string>vmport=off</string>
		<key>Memory</key>
		<integer>1024</integer>
		<key>RngEnabled</key>
		<true/>
		<key>SystemUUID</key>
		<string>${vmuuid^^}</string>
		<key>Target</key>
		<string>q35</string>
		<key>UseHypervisor</key>
		<true/>
	</dict>
</dict>
</plist>
_EOF_
	# Create VM interface config
	cat << '_EOF_' > "$image_name.utm/view.plist"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>DisplayOriginX</key>
	<real>0.0</real>
	<key>DisplayOriginY</key>
	<real>0.0</real>
	<key>DisplayScale</key>
	<real>1</real>
	<key>DisplaySizeHeight</key>
	<real>768</real>
	<key>DisplaySizeWidth</key>
	<real>1024</real>
	<key>RemovableDrives</key>
	<dict/>
	<key>RemovableDrivesPath</key>
	<dict/>
	<key>ShowKeyboard</key>
	<false/>
	<key>ShowToolbar</key>
	<true/>
	<key>Suspended</key>
	<false/>
</dict>
</plist>
_EOF_
	G_DIETPI-NOTIFY 2 'Generating hashes to pack with UTM appliance, please wait...'
	cat << _EOF_ > hash.txt
FILE:   $image_name.utm/Images/data.qcow2
DATE:   $(date)
MD5:    $(md5sum "$image_name.utm/Images/data.qcow2" | mawk '{print $1}')
SHA1:   $(sha1sum "$image_name.utm/Images/data.qcow2" | mawk '{print $1}')
SHA256: $(sha256sum "$image_name.utm/Images/data.qcow2" | mawk '{print $1}')

FILE:   $image_name.utm/config.plist
DATE:   $(date)
MD5:    $(md5sum "$image_name.utm/config.plist" | mawk '{print $1}')
SHA1:   $(sha1sum "$image_name.utm/config.plist" | mawk '{print $1}')
SHA256: $(sha256sum "$image_name.utm/config.plist" | mawk '{print $1}')

FILE:   $image_name.utm/view.plist
DATE:   $(date)
MD5:    $(md5sum "$image_name.utm/view.plist" | mawk '{print $1}')
SHA1:   $(sha1sum "$image_name.utm/view.plist" | mawk '{print $1}')
SHA256: $(sha256sum "$image_name.utm/view.plist" | mawk '{print $1}')
_EOF_
	G_EXEC_DESC='Creating UTM 7-Zip archive' G_EXEC_OUTPUT=1 G_EXEC 7zr a -bsp1 -bso1 -bse2 -m0=lzma2 -mx=9 $limit_threads "$image_name.7z" "$image_name.utm" hash.txt README.md
	G_EXEC rm -R "$image_name.utm"
	[[ -x 'upload.sh' ]] && G_EXEC_OUTPUT=1 G_EXEC ./upload.sh "$image_name.7z" && G_EXEC rm "$image_name.7z"
fi

# Cleanup
G_EXEC rm hash.txt README.md "$OUTPUT_IMG_NAME.img"

exit 0
}
