#!/bin/bash
{
	#////////////////////////////////////
	# DietPi Banner Script
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - Location: /boot/dietpi/func/dietpi-banner
	# - Checks /run/dietpi/.update_available, /run/dietpi/.live_patches, /run/dietpi/.apt_updates, /run/dietpi/.dietpi_motd and /boot/dietpi/.prep_info
	#
	# Usage:
	# - dietpi-banner   = banner customisation menu
	# - dietpi-banner 0 = top section + LAN IP
	# - dietpi-banner 1 = clear terminal + top section + chosen entries + credits
	#////////////////////////////////////

	# Grab input
	[[ $1 == [01] ]] && INPUT=$1 || INPUT=2

	# Import DietPi-Globals --------------------------------------------------------------
	. /boot/dietpi/func/dietpi-globals
	# - Allow concurrent banner prints but a single menu call only
	if [[ $1 == 2 ]]
	then
		readonly G_PROGRAM_NAME='DietPi-Banner'
		G_CHECK_ROOT_USER # Required to store settings
		G_INIT
	fi
	# Import DietPi-Globals --------------------------------------------------------------

	#/////////////////////////////////////////////////////////////////////////////////////
	# Globals
	#/////////////////////////////////////////////////////////////////////////////////////
	readonly FP_SAVEFILE='/boot/dietpi/.dietpi-banner'
	readonly FP_CUSTOM='/boot/dietpi/.dietpi-banner_custom'

	aDESCRIPTION=(

		'Device model'
		'Uptime'
		'CPU temp'
		'FQDN/hostname'
		'NIS domainname'
		'LAN IP'
		'WAN IP'
		'Freespace (RootFS)'
		'Freespace (userdata)'
		'Weather (wttr.in)'
		'Custom banner entry'
		'Display DietPi useful commands?'
		'MOTD'
		'VPN status'
		'Large hostname'
		'Print credits'
		'Let'\''s Encrypt cert status'
		'Word wrap for small terminals?'
	)

	# Set defaults: Disable CPU temp by default in VMs
	if (( $G_HW_MODEL == 20 ))
	then
		aENABLED=(1 0 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0)
	else
		aENABLED=(1 0 1 0 0 1 0 0 0 0 0 1 1 0 0 1 0 0)
	fi

	COLOUR_RESET='\e[0m'
	aCOLOUR=(

		'\e[38;5;154m'	# DietPi green	| Lines, bullets and separators
		'\e[1m'		# Bold white	| Main descriptions
		'\e[90m'	# Grey		| Credits
		'\e[91m'	# Red		| Update notifications
	)

    ## Parse the above colour strings and use them to generate an expression to match them
    ## via bash substitution
    __make_strip_color(){
        # shellcheck disable=SC2124
        local tmp="${aCOLOUR[@]} $COLOUR_RESET" ## convert array to string
        tmp="+(${tmp// /|})"                    ## convert list into OR expression
        tmp="${tmp//\\e/\\\\\\e}"               ## ensure '\e' exists
        tmp="${tmp//\[/\\[}"                    ## ensure '\[' exists
        echo "$tmp"
    }
    shopt -s extglob    ## globally enable multiple pattern matching, and disable at the end
    COLOUR_STRIP="$(__make_strip_color)"

	# Load settings here, to have chosen ${aCOLOUR[0]} applied to below strings
	# shellcheck disable=SC1090
	[[ -f $FP_SAVEFILE ]] && . "$FP_SAVEFILE"

	TERM_WIDTH=$(tput cols)

	GREEN_LINE_FILLER=$(printf -- "â”€%.0s" $(seq 1 $(( $TERM_WIDTH - 2 ))))
	GREEN_LINE=" ${aCOLOUR[0]}${GREEN_LINE_FILLER}$COLOUR_RESET"
	GREEN_BULLET=" ${aCOLOUR[0]}-$COLOUR_RESET"
	GREEN_SEPARATOR="${aCOLOUR[0]}:$COLOUR_RESET"

    # Print a banner line split into title and description with word-wrapping
	Print_Line(){
	    local title="$1"  ## Bold part before ":"
	    local descp="$2"  ## Normal part after ":"

        if [[ $WORD_WRAP == 1 ]]; then
            ## Strip invisible colour codes in order to accurately measure the visual length
            ## of a sentence.
	        local stripped_title="${title//$COLOUR_STRIP/}"
	        local stripped_descp="${descp//$COLOUR_STRIP/}"

            local title_len=${#stripped_title}
            local descp_len=${#stripped_descp}

            ## Sometimes the title is long, so a sanity check is performed to fold the title
            ## if it exceeds the window size. Because of the hyphen it receives 3 spaces padding.
	        if (( $title_len >= $TERM_WIDTH )); then
                title=$(echo "$stripped_title" | fold -s -w "$TERM_WIDTH")
                title="${title//$'\n'/$'\n'   }"
		        title="${aCOLOUR[1]}${title}$COLOUR_RESET"
                ## Recalculate the title length based on the last line with padding
                title_len=$(( (($title_len + 3) % $TERM_WIDTH) + 3 ))
	        fi

            local avail_len=$(( ($TERM_WIDTH - $title_len) - 1))
            local left_pad=$(printf -- " %.0s" $(seq 0 "$title_len"))

            ## The description is typically very long, and is folded from the second line
            ## onwards into the remaining available space, with left padding.
	        if (( $descp_len >= $avail_len )); then
                descp=$(echo "$stripped_descp" | fold -s -w "$avail_len")
                descp="${descp//$'\n'/$'\n'${left_pad}}"
	        fi
        fi

        echo -e "$title $descp"
	}

	DIETPI_VERSION="$G_DIETPI_VERSION_CORE.$G_DIETPI_VERSION_SUB.$G_DIETPI_VERSION_RC"
	[[ $G_GITBRANCH == 'master' ]] || DIETPI_VERSION+=" ($G_GITBRANCH)"

	# DietPi update available?
	AVAILABLE_UPDATE= # value = version string
	Check_DietPi_Update()
	{
		[[ -f '/run/dietpi/.update_available' ]] || return 1
		AVAILABLE_UPDATE=$(</run/dietpi/.update_available)
		return 0
	}

	# New DietPi live patches available?
	LIVE_PATCHES=0
	Check_DietPi_Live_Patches()
	{
		[[ -f '/run/dietpi/.live_patches' ]] || return 1
		LIVE_PATCHES=1
		return 0
	}

	# APT updates available?
	PACKAGE_COUNT=0
	Check_APT_Updates()
	{
		[[ -f '/run/dietpi/.apt_updates' ]] || return 1
		PACKAGE_COUNT=$(</run/dietpi/.apt_updates)
		return 0
	}

	# Reboot required to finalise kernel upgrade?
	REBOOT_REQUIRED=0
	Check_Reboot()
	{
		G_CHECK_KERNEL && return 1
		REBOOT_REQUIRED=1
		return 0
	}

	Save()
	{
		# Custom entry description
		echo "aDESCRIPTION[10]='${aDESCRIPTION[10]}'"

		for i in "${!aDESCRIPTION[@]}"
		do
			echo "aENABLED[$i]=${aENABLED[$i]}"
		done

		for i in "${!aCOLOUR[@]}"
		do
			echo "aCOLOUR[$i]='${aCOLOUR[$i]}'"
		done
	}

	Print_Header()
	{
		# DietPi update available?
		if Check_DietPi_Update
		then
			local text_update_available_date="${aCOLOUR[3]}Update available"

		# New DietPi live patches available?
		elif Check_DietPi_Live_Patches
		then
			local text_update_available_date="${aCOLOUR[3]}New live patches available"

		# APT update available?
		elif Check_APT_Updates
		then
			local text_update_available_date="${aCOLOUR[3]}$PACKAGE_COUNT APT updates available"

		# Reboot required to finalise kernel upgrade?
		elif Check_Reboot
		then
			local text_update_available_date="${aCOLOUR[3]}Reboot required"
		else
			local locale=$(sed -n '/^[[:blank:]]*AUTO_SETUP_LOCALE=/{s/^[^=]*=//p;q}' /boot/dietpi.txt)
			local text_update_available_date=$(LC_ALL=${locale:-C.UTF-8} date '+%R - %a %x')
		fi

		echo -e "$GREEN_LINE"
		Print_Line " ${aCOLOUR[1]}DietPi v$DIETPI_VERSION$COLOUR_RESET $GREEN_SEPARATOR" "$text_update_available_date$COLOUR_RESET"
		echo -e "$GREEN_LINE"
	}

	Print_Local_Ip()
	{
		[[ ${aENABLED[5]} == 1 ]] || return 0
		local iface=$(G_GET_NET -q iface)
		local ip=$(G_GET_NET -q ip)
		Print_Line "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[5]} $GREEN_SEPARATOR" "${ip:-Use dietpi-config to setup a connection} (${iface:-NONE})"
	}

	Print_Credits()
	{
		Print_Line " ${aCOLOUR[2]}DietPi Team     :" "https://github.com/MichaIng/DietPi#the-dietpi-project-team"

		if [[ -f '/boot/dietpi/.prep_info' ]]; then
		    local info=$(mawk 'NR==1 {sub(/^0$/,"DietPi Core Team");a=$0} NR==2 {print ""a" (pre-image: "$0")"}' /boot/dietpi/.prep_info)
		    Print_Line " Image by        :" "$info"
		fi

		Print_Line " Patreon Legends :" "Camry2731, Chris Gelatt"
		Print_Line " Website         :" "https://dietpi.com/ | https://twitter.com/DietPi_"
		Print_Line " Contribute      :" "https://dietpi.com/contribute.html"
		Print_Line " Web Hosting by  :" "https://myvirtualserver.com$COLOUR_RESET\n"
	}

	Print_Updates()
	{
		# DietPi update available?
		if [[ $AVAILABLE_UPDATE ]]
		then
			Print_Line " ${aCOLOUR[1]}dietpi-update$COLOUR_RESET   $GREEN_SEPARATOR" "${aCOLOUR[3]}Run now to update DietPi from v$DIETPI_VERSION to v$AVAILABLE_UPDATE$COLOUR_RESET\n"

		# New DietPi live patches available?
		elif (( $LIVE_PATCHES ))
		then
			Print_Line " ${aCOLOUR[1]}dietpi-update$COLOUR_RESET   $GREEN_SEPARATOR" "${aCOLOUR[3]}Run now to check out new available DietPi live patches$COLOUR_RESET\n"

		# APT updates available?
		elif (( $PACKAGE_COUNT ))
		then
			Print_Line " ${aCOLOUR[1]}apt upgrade$COLOUR_RESET     $GREEN_SEPARATOR" "${aCOLOUR[3]}Run now to apply $PACKAGE_COUNT available APT package upgrades$COLOUR_RESET\n"

		# Reboot required to finalise kernel upgrade?
		elif (( $REBOOT_REQUIRED ))
		then
			Print_Line " ${aCOLOUR[1]}reboot$COLOUR_RESET          $GREEN_SEPARATOR" "${aCOLOUR[3]}A reboot is required to finalise a recent kernel upgrade$COLOUR_RESET\n"
		fi
	}

	Print_Useful_Commands()
	{
		Print_Line " ${aCOLOUR[1]}dietpi-launcher$COLOUR_RESET $GREEN_SEPARATOR" "All the DietPi programs in one place"
		Print_Line " ${aCOLOUR[1]}dietpi-config$COLOUR_RESET   $GREEN_SEPARATOR" "Feature rich configuration tool for your device"
		Print_Line " ${aCOLOUR[1]}dietpi-software$COLOUR_RESET $GREEN_SEPARATOR" "Select optimised software for installation"
		Print_Line " ${aCOLOUR[1]}htop$COLOUR_RESET            $GREEN_SEPARATOR" "Resource monitor"
		Print_Line " ${aCOLOUR[1]}cpu$COLOUR_RESET             $GREEN_SEPARATOR" "Shows CPU information and stats\n"
	}

	Print_Banner()
	{
		G_TERM_CLEAR
		Print_Header

        # Word Wrap
        (( ${aENABLED[16]} == 1 )) && WORD_WRAP=1
		# Large Format Hostname
		# shellcheck disable=SC1091
		(( ${aENABLED[14]} == 1 )) && . /boot/dietpi/func/dietpi-print_large "$(</etc/hostname)" && echo
		# Device model
		(( ${aENABLED[0]} == 1 )) && Print_Line "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[0]} $GREEN_SEPARATOR" "$G_HW_MODEL_NAME"
		# Uptime
		(( ${aENABLED[1]} == 1 )) && Print_Line "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[1]} $GREEN_SEPARATOR" "$(uptime -p 2>&1)"
		# CPU temp
		(( ${aENABLED[2]} == 1 )) && Print_Line "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[2]} $GREEN_SEPARATOR" "$(print_full_info=1 G_OBTAIN_CPU_TEMP 2>&1)"
		# Hostname
		(( ${aENABLED[3]} == 1 && ${aENABLED[14]} != 1 )) && Print_Line "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[3]} $GREEN_SEPARATOR" "$(</etc/hostname)"
		# NIS/YP domainname
		(( ${aENABLED[4]} == 1 )) && Print_Line "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[4]} $GREEN_SEPARATOR" "$(hostname -y 2>&1)"
		# LAN IP
		Print_Local_Ip
		# WAN IP + location info
		(( ${aENABLED[6]} == 1 )) && Print_Line "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[6]} $GREEN_SEPARATOR" "$(G_GET_WAN_IP 2>&1)"
		# DietPi-VPN connection status
		(( ${aENABLED[13]} == 1 )) && Print_Line "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[13]} $GREEN_SEPARATOR" "$(/boot/dietpi/dietpi-vpn status 2>&1)"
		# Freespace (RootFS)
		(( ${aENABLED[7]} == 1 )) && Print_Line "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[7]} $GREEN_SEPARATOR" "$(df -h --output=avail / | mawk 'NR==2 {print $1}' 2>&1)"
		# Freespace (DietPi userdata)
		(( ${aENABLED[8]} == 1 )) && Print_Line "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[8]} $GREEN_SEPARATOR" "$(df -h --output=avail /mnt/dietpi_userdata | mawk 'NR==2 {print $1}' 2>&1)"
		# Let's Encrypt cert status
		if (( ${aENABLED[16]} == 1 ))
		then
			local i certinfo='No certificate found'
			for i in /etc/letsencrypt/live/*/cert.pem
			do
				[[ -f $i ]] || continue
				certinfo=$(openssl x509 -enddate -noout -in "$i" | mawk '/notAfter=/{print "Valid until "$4"-"substr($1,10)"-"$2" "$3}' 2>&1)
				break
			done
			Print_Line "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[16]} $GREEN_SEPARATOR" "$certinfo"
		fi
		# Weather
		(( ${aENABLED[9]} == 1 )) && Print_Line "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[9]} $GREEN_SEPARATOR" "$(curl -sSfLm 3 'https://wttr.in/?format=4' 2>&1)"
		# Custom
		(( ${aENABLED[10]} == 1 )) && Print_Line "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[10]} $GREEN_SEPARATOR" "$(bash "$FP_CUSTOM" 2>&1)"
		# MOTD
		if (( ${aENABLED[12]} == 1 ))
		then
			local motd fp_motd='/run/dietpi/.dietpi_motd'
			[[ -f $fp_motd ]] || curl -sSfLm 3 'https://dietpi.com/motd' -o "$fp_motd"
			# shellcheck disable=SC1090
			[[ -f $fp_motd ]] && . "$fp_motd" &> /dev/null && [[ $motd ]] && Print_Line "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[12]} $GREEN_SEPARATOR" "$motd"
		fi
		echo -e "$GREEN_LINE\n"

		(( ${aENABLED[15]} == 1 )) && Print_Credits
		Print_Updates
		(( ${aENABLED[11]} == 1 )) && Print_Useful_Commands
	}

	Menu_Main()
	{
		G_WHIP_CHECKLIST_ARRAY=()
		for i in "${!aDESCRIPTION[@]}"
		do
			local state='off'
			(( ${aENABLED[$i]:=0} == 1 )) && state='on'
			G_WHIP_CHECKLIST_ARRAY+=("$i" "${aDESCRIPTION[$i]}" "$state")
		done

		G_WHIP_CHECKLIST "Please (de)select options via spacebar to be shown in the $G_PROGRAM_NAME:" || return 0

		for i in "${!aDESCRIPTION[@]}"
		do
			aENABLED[$i]=0
		done

		for i in $G_WHIP_RETURNED_VALUE
		do
			aENABLED[$i]=1

			# Custom entry
			(( $i == 10 )) || continue

			[[ -f $FP_CUSTOM ]] && G_WHIP_DEFAULT_ITEM=$(<"$FP_CUSTOM") || G_WHIP_DEFAULT_ITEM="echo 'Hello World!'"
			G_WHIP_INPUTBOX 'You have chosen to show a custom entry in the banner.
Please enter the desired command here.\n
NB: It is executed as bash script, so it needs to be in bash compatible syntax.
    For multi-line or non-bash scripts, keep it separate and only add the script call here.' || continue

			echo "$G_WHIP_RETURNED_VALUE" > "$FP_CUSTOM"

			G_WHIP_DEFAULT_ITEM=${aDESCRIPTION[10]}
			G_WHIP_INPUTBOX 'Please enter a meaningful name to be shown in front of your custom command output:' && aDESCRIPTION[10]=$G_WHIP_RETURNED_VALUE
		done

		[[ -f $FP_CUSTOM ]] || aENABLED[10]=0

		Save > "$FP_SAVEFILE"
	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	if (( $INPUT == 0 ))
	then
		Print_Header
		Print_Local_Ip

	elif (( $INPUT == 1 ))
	then
		Print_Banner

	elif (( $INPUT == 2 ))
	then
		Menu_Main
		Print_Banner
	fi
    shopt -u extglob
	#-----------------------------------------------------------------------------------
	exit 0
	#-----------------------------------------------------------------------------------
}
